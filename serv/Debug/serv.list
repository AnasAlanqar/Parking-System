
serv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003068  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003174  08003174  00004174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003198  08003198  00005018  2**0
                  CONTENTS
  4 .ARM          00000000  08003198  08003198  00005018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003198  08003198  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003198  08003198  00004198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800319c  0800319c  0000419c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080031a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000018  080031b8  00005018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080031b8  0000513c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a11d  00000000  00000000  00005041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aaf  00000000  00000000  0000f15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00010c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000938  00000000  00000000  000117f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fb2  00000000  00000000  00012130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c659  00000000  00000000  000290e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086647  00000000  00000000  0003573b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbd82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003190  00000000  00000000  000bbdc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000bef58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	0800315c 	.word	0x0800315c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	0800315c 	.word	0x0800315c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 ff4d 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8d5 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa65 	bl	8000628 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015e:	f000 f94d 	bl	80003fc <MX_TIM1_Init>
  MX_SPI1_Init();
 8000162:	f000 f915 	bl	8000390 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000166:	f000 f9e9 	bl	800053c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  MFRC522_Init();
 800016a:	f000 fc81 	bl	8000a70 <MFRC522_Init>

//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);

  HAL_TIM_Base_Start(&htim1);
 800016e:	485b      	ldr	r0, [pc, #364]	@ (80002dc <main+0x190>)
 8000170:	f002 f99a 	bl	80024a8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000174:	2100      	movs	r1, #0
 8000176:	4859      	ldr	r0, [pc, #356]	@ (80002dc <main+0x190>)
 8000178:	f002 fa38 	bl	80025ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800017c:	2100      	movs	r1, #0
 800017e:	4858      	ldr	r0, [pc, #352]	@ (80002e0 <main+0x194>)
 8000180:	f002 fa34 	bl	80025ec <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//

      int available_slots = 4;
 8000184:	2304      	movs	r3, #4
 8000186:	607b      	str	r3, [r7, #4]

      // Check each sensor and control LEDs
      checkSensor(GPIOB, GPIO_PIN_11, GPIOB, GPIO_PIN_12, GPIOB, GPIO_PIN_13, &available_slots);
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	9302      	str	r3, [sp, #8]
 800018c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000190:	9301      	str	r3, [sp, #4]
 8000192:	4b54      	ldr	r3, [pc, #336]	@ (80002e4 <main+0x198>)
 8000194:	9300      	str	r3, [sp, #0]
 8000196:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800019a:	4a52      	ldr	r2, [pc, #328]	@ (80002e4 <main+0x198>)
 800019c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001a0:	4850      	ldr	r0, [pc, #320]	@ (80002e4 <main+0x198>)
 80001a2:	f000 faf5 	bl	8000790 <checkSensor>
      checkSensor(GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_14, GPIOB, GPIO_PIN_15, &available_slots);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	9302      	str	r3, [sp, #8]
 80001aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80001ae:	9301      	str	r3, [sp, #4]
 80001b0:	4b4c      	ldr	r3, [pc, #304]	@ (80002e4 <main+0x198>)
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80001b8:	4a4a      	ldr	r2, [pc, #296]	@ (80002e4 <main+0x198>)
 80001ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001be:	4849      	ldr	r0, [pc, #292]	@ (80002e4 <main+0x198>)
 80001c0:	f000 fae6 	bl	8000790 <checkSensor>
      checkSensor(GPIOB, GPIO_PIN_1, GPIOA, GPIO_PIN_9, GPIOA, GPIO_PIN_10, &available_slots);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	9302      	str	r3, [sp, #8]
 80001c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001cc:	9301      	str	r3, [sp, #4]
 80001ce:	4b46      	ldr	r3, [pc, #280]	@ (80002e8 <main+0x19c>)
 80001d0:	9300      	str	r3, [sp, #0]
 80001d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80001d6:	4a44      	ldr	r2, [pc, #272]	@ (80002e8 <main+0x19c>)
 80001d8:	2102      	movs	r1, #2
 80001da:	4842      	ldr	r0, [pc, #264]	@ (80002e4 <main+0x198>)
 80001dc:	f000 fad8 	bl	8000790 <checkSensor>
      checkSensor(GPIOA, GPIO_PIN_6, GPIOA, GPIO_PIN_11, GPIOA, GPIO_PIN_12, &available_slots);
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	9302      	str	r3, [sp, #8]
 80001e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80001e8:	9301      	str	r3, [sp, #4]
 80001ea:	4b3f      	ldr	r3, [pc, #252]	@ (80002e8 <main+0x19c>)
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80001f2:	4a3d      	ldr	r2, [pc, #244]	@ (80002e8 <main+0x19c>)
 80001f4:	2140      	movs	r1, #64	@ 0x40
 80001f6:	483c      	ldr	r0, [pc, #240]	@ (80002e8 <main+0x19c>)
 80001f8:	f000 faca 	bl	8000790 <checkSensor>

      // Display the available slots on the 7-segment display
      HC595write(number[available_slots]);
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a3b      	ldr	r2, [pc, #236]	@ (80002ec <main+0x1a0>)
 8000200:	5cd3      	ldrb	r3, [r2, r3]
 8000202:	4618      	mov	r0, r3
 8000204:	f000 faf8 	bl	80007f8 <HC595write>
      // RFID scanning
      status = MFRC522_Request(PICC_REQIDL, str);
 8000208:	4939      	ldr	r1, [pc, #228]	@ (80002f0 <main+0x1a4>)
 800020a:	2026      	movs	r0, #38	@ 0x26
 800020c:	f000 fd27 	bl	8000c5e <MFRC522_Request>
 8000210:	4603      	mov	r3, r0
 8000212:	461a      	mov	r2, r3
 8000214:	4b37      	ldr	r3, [pc, #220]	@ (80002f4 <main+0x1a8>)
 8000216:	701a      	strb	r2, [r3, #0]
      status = MFRC522_Anticoll(str);
 8000218:	4835      	ldr	r0, [pc, #212]	@ (80002f0 <main+0x1a4>)
 800021a:	f000 fd45 	bl	8000ca8 <MFRC522_Anticoll>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b34      	ldr	r3, [pc, #208]	@ (80002f4 <main+0x1a8>)
 8000224:	701a      	strb	r2, [r3, #0]
      memcpy(sNum, str, 5);
 8000226:	4b34      	ldr	r3, [pc, #208]	@ (80002f8 <main+0x1ac>)
 8000228:	4a31      	ldr	r2, [pc, #196]	@ (80002f0 <main+0x1a4>)
 800022a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800022e:	6018      	str	r0, [r3, #0]
 8000230:	3304      	adds	r3, #4
 8000232:	7019      	strb	r1, [r3, #0]
      HAL_Delay(100);
 8000234:	2064      	movs	r0, #100	@ 0x64
 8000236:	f000 ff3d 	bl	80010b4 <HAL_Delay>

      if ((str[0] == 53) && (str[1] == 114) && (str[2] == 40) && (str[3] == 79) && (str[4] == 32))
 800023a:	4b2d      	ldr	r3, [pc, #180]	@ (80002f0 <main+0x1a4>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2b35      	cmp	r3, #53	@ 0x35
 8000240:	d125      	bne.n	800028e <main+0x142>
 8000242:	4b2b      	ldr	r3, [pc, #172]	@ (80002f0 <main+0x1a4>)
 8000244:	785b      	ldrb	r3, [r3, #1]
 8000246:	2b72      	cmp	r3, #114	@ 0x72
 8000248:	d121      	bne.n	800028e <main+0x142>
 800024a:	4b29      	ldr	r3, [pc, #164]	@ (80002f0 <main+0x1a4>)
 800024c:	789b      	ldrb	r3, [r3, #2]
 800024e:	2b28      	cmp	r3, #40	@ 0x28
 8000250:	d11d      	bne.n	800028e <main+0x142>
 8000252:	4b27      	ldr	r3, [pc, #156]	@ (80002f0 <main+0x1a4>)
 8000254:	78db      	ldrb	r3, [r3, #3]
 8000256:	2b4f      	cmp	r3, #79	@ 0x4f
 8000258:	d119      	bne.n	800028e <main+0x142>
 800025a:	4b25      	ldr	r3, [pc, #148]	@ (80002f0 <main+0x1a4>)
 800025c:	791b      	ldrb	r3, [r3, #4]
 800025e:	2b20      	cmp	r3, #32
 8000260:	d115      	bne.n	800028e <main+0x142>
      {
          if (available_slots > 0)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b00      	cmp	r3, #0
 8000266:	dd0b      	ble.n	8000280 <main+0x134>
          {
              // Valid card and available slots
              openServo();
 8000268:	f000 fb2e 	bl	80008c8 <openServo>
              HAL_Delay(3000);  // Keep the servo open for 3 seconds
 800026c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000270:	f000 ff20 	bl	80010b4 <HAL_Delay>
              closeServo();
 8000274:	f000 fb36 	bl	80008e4 <closeServo>

              // Update slot availability (e.g., decrement by 1)
              available_slots--;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3b01      	subs	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
          if (available_slots > 0)
 800027e:	e00c      	b.n	800029a <main+0x14e>
          }
          else
          {
              // Slots full, do not open servo
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);  // Turn on an LED to indicate full slots
 8000280:	2201      	movs	r2, #1
 8000282:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000286:	481d      	ldr	r0, [pc, #116]	@ (80002fc <main+0x1b0>)
 8000288:	f001 f9e1 	bl	800164e <HAL_GPIO_WritePin>
          if (available_slots > 0)
 800028c:	e005      	b.n	800029a <main+0x14e>
          }
      }
      else
      {
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  // Turn off the LED for invalid card
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000294:	4819      	ldr	r0, [pc, #100]	@ (80002fc <main+0x1b0>)
 8000296:	f001 f9da 	bl	800164e <HAL_GPIO_WritePin>
      }

      HAL_Delay(500);  // Update loop every 500ms
 800029a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800029e:	f000 ff09 	bl	80010b4 <HAL_Delay>

      if (servo_action_flag) {
 80002a2:	4b17      	ldr	r3, [pc, #92]	@ (8000300 <main+0x1b4>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	f43f af6b 	beq.w	8000184 <main+0x38>
          __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);  // Servo open position
 80002ae:	4b0b      	ldr	r3, [pc, #44]	@ (80002dc <main+0x190>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002b6:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_Delay(3000);  // Delay in main loop (safe here)
 80002b8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80002bc:	f000 fefa 	bl	80010b4 <HAL_Delay>
          __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 2000);  // Servo close position
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <main+0x190>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80002c8:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_Delay(3000);
 80002ca:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80002ce:	f000 fef1 	bl	80010b4 <HAL_Delay>

          servo_action_flag = 0;  // Reset flag
 80002d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000300 <main+0x1b4>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
  {
 80002d8:	e754      	b.n	8000184 <main+0x38>
 80002da:	bf00      	nop
 80002dc:	2000008c 	.word	0x2000008c
 80002e0:	200000d4 	.word	0x200000d4
 80002e4:	40010c00 	.word	0x40010c00
 80002e8:	40010800 	.word	0x40010800
 80002ec:	20000000 	.word	0x20000000
 80002f0:	20000120 	.word	0x20000120
 80002f4:	2000011c 	.word	0x2000011c
 80002f8:	20000130 	.word	0x20000130
 80002fc:	40011000 	.word	0x40011000
 8000300:	20000135 	.word	0x20000135

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b090      	sub	sp, #64	@ 0x40
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0318 	add.w	r3, r7, #24
 800030e:	2228      	movs	r2, #40	@ 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f002 fef5 	bl	8003102 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000326:	2301      	movs	r3, #1
 8000328:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800032a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800032e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000334:	2301      	movs	r3, #1
 8000336:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000338:	2302      	movs	r3, #2
 800033a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000340:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000342:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000346:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000348:	f107 0318 	add.w	r3, r7, #24
 800034c:	4618      	mov	r0, r3
 800034e:	f001 f997 	bl	8001680 <HAL_RCC_OscConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000358:	f000 fad2 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035c:	230f      	movs	r3, #15
 800035e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000360:	2302      	movs	r3, #2
 8000362:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800036c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2102      	movs	r1, #2
 8000376:	4618      	mov	r0, r3
 8000378:	f001 fc04 	bl	8001b84 <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000382:	f000 fabd 	bl	8000900 <Error_Handler>
  }
}
 8000386:	bf00      	nop
 8000388:	3740      	adds	r7, #64	@ 0x40
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000394:	4b17      	ldr	r3, [pc, #92]	@ (80003f4 <MX_SPI1_Init+0x64>)
 8000396:	4a18      	ldr	r2, [pc, #96]	@ (80003f8 <MX_SPI1_Init+0x68>)
 8000398:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800039a:	4b16      	ldr	r3, [pc, #88]	@ (80003f4 <MX_SPI1_Init+0x64>)
 800039c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003a2:	4b14      	ldr	r3, [pc, #80]	@ (80003f4 <MX_SPI1_Init+0x64>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003a8:	4b12      	ldr	r3, [pc, #72]	@ (80003f4 <MX_SPI1_Init+0x64>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <MX_SPI1_Init+0x64>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <MX_SPI1_Init+0x64>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	@ (80003f4 <MX_SPI1_Init+0x64>)
 80003bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80003c2:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <MX_SPI1_Init+0x64>)
 80003c4:	2210      	movs	r2, #16
 80003c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003c8:	4b0a      	ldr	r3, [pc, #40]	@ (80003f4 <MX_SPI1_Init+0x64>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ce:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <MX_SPI1_Init+0x64>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003d4:	4b07      	ldr	r3, [pc, #28]	@ (80003f4 <MX_SPI1_Init+0x64>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003da:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <MX_SPI1_Init+0x64>)
 80003dc:	220a      	movs	r2, #10
 80003de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003e0:	4804      	ldr	r0, [pc, #16]	@ (80003f4 <MX_SPI1_Init+0x64>)
 80003e2:	f001 fd2b 	bl	8001e3c <HAL_SPI_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003ec:	f000 fa88 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000034 	.word	0x20000034
 80003f8:	40013000 	.word	0x40013000

080003fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b096      	sub	sp, #88	@ 0x58
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000402:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000410:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800041a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]
 800042a:	615a      	str	r2, [r3, #20]
 800042c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2220      	movs	r2, #32
 8000432:	2100      	movs	r1, #0
 8000434:	4618      	mov	r0, r3
 8000436:	f002 fe64 	bl	8003102 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800043a:	4b3e      	ldr	r3, [pc, #248]	@ (8000534 <MX_TIM1_Init+0x138>)
 800043c:	4a3e      	ldr	r2, [pc, #248]	@ (8000538 <MX_TIM1_Init+0x13c>)
 800043e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000440:	4b3c      	ldr	r3, [pc, #240]	@ (8000534 <MX_TIM1_Init+0x138>)
 8000442:	2247      	movs	r2, #71	@ 0x47
 8000444:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000446:	4b3b      	ldr	r3, [pc, #236]	@ (8000534 <MX_TIM1_Init+0x138>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800044c:	4b39      	ldr	r3, [pc, #228]	@ (8000534 <MX_TIM1_Init+0x138>)
 800044e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000452:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000454:	4b37      	ldr	r3, [pc, #220]	@ (8000534 <MX_TIM1_Init+0x138>)
 8000456:	2200      	movs	r2, #0
 8000458:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800045a:	4b36      	ldr	r3, [pc, #216]	@ (8000534 <MX_TIM1_Init+0x138>)
 800045c:	2200      	movs	r2, #0
 800045e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000460:	4b34      	ldr	r3, [pc, #208]	@ (8000534 <MX_TIM1_Init+0x138>)
 8000462:	2200      	movs	r2, #0
 8000464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000466:	4833      	ldr	r0, [pc, #204]	@ (8000534 <MX_TIM1_Init+0x138>)
 8000468:	f001 ffcf 	bl	800240a <HAL_TIM_Base_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000472:	f000 fa45 	bl	8000900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000476:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800047a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800047c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000480:	4619      	mov	r1, r3
 8000482:	482c      	ldr	r0, [pc, #176]	@ (8000534 <MX_TIM1_Init+0x138>)
 8000484:	f002 fa16 	bl	80028b4 <HAL_TIM_ConfigClockSource>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800048e:	f000 fa37 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000492:	4828      	ldr	r0, [pc, #160]	@ (8000534 <MX_TIM1_Init+0x138>)
 8000494:	f002 f852 	bl	800253c <HAL_TIM_PWM_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800049e:	f000 fa2f 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a2:	2300      	movs	r3, #0
 80004a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004ae:	4619      	mov	r1, r3
 80004b0:	4820      	ldr	r0, [pc, #128]	@ (8000534 <MX_TIM1_Init+0x138>)
 80004b2:	f002 fd77 	bl	8002fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80004bc:	f000 fa20 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004c0:	2360      	movs	r3, #96	@ 0x60
 80004c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004c8:	2300      	movs	r3, #0
 80004ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004cc:	2300      	movs	r3, #0
 80004ce:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004d4:	2300      	movs	r3, #0
 80004d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004d8:	2300      	movs	r3, #0
 80004da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004e0:	2200      	movs	r2, #0
 80004e2:	4619      	mov	r1, r3
 80004e4:	4813      	ldr	r0, [pc, #76]	@ (8000534 <MX_TIM1_Init+0x138>)
 80004e6:	f002 f923 	bl	8002730 <HAL_TIM_PWM_ConfigChannel>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80004f0:	f000 fa06 	bl	8000900 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000508:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800050c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800050e:	2300      	movs	r3, #0
 8000510:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	4619      	mov	r1, r3
 8000516:	4807      	ldr	r0, [pc, #28]	@ (8000534 <MX_TIM1_Init+0x138>)
 8000518:	f002 fda2 	bl	8003060 <HAL_TIMEx_ConfigBreakDeadTime>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000522:	f000 f9ed 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000526:	4803      	ldr	r0, [pc, #12]	@ (8000534 <MX_TIM1_Init+0x138>)
 8000528:	f000 fcb8 	bl	8000e9c <HAL_TIM_MspPostInit>

}
 800052c:	bf00      	nop
 800052e:	3758      	adds	r7, #88	@ 0x58
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	2000008c 	.word	0x2000008c
 8000538:	40012c00 	.word	0x40012c00

0800053c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08e      	sub	sp, #56	@ 0x38
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000542:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000550:	f107 0320 	add.w	r3, r7, #32
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
 8000568:	615a      	str	r2, [r3, #20]
 800056a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800056c:	4b2d      	ldr	r3, [pc, #180]	@ (8000624 <MX_TIM2_Init+0xe8>)
 800056e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000572:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000574:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <MX_TIM2_Init+0xe8>)
 8000576:	2247      	movs	r2, #71	@ 0x47
 8000578:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057a:	4b2a      	ldr	r3, [pc, #168]	@ (8000624 <MX_TIM2_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000580:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <MX_TIM2_Init+0xe8>)
 8000582:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000586:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000588:	4b26      	ldr	r3, [pc, #152]	@ (8000624 <MX_TIM2_Init+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058e:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <MX_TIM2_Init+0xe8>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000594:	4823      	ldr	r0, [pc, #140]	@ (8000624 <MX_TIM2_Init+0xe8>)
 8000596:	f001 ff38 	bl	800240a <HAL_TIM_Base_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80005a0:	f000 f9ae 	bl	8000900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005ae:	4619      	mov	r1, r3
 80005b0:	481c      	ldr	r0, [pc, #112]	@ (8000624 <MX_TIM2_Init+0xe8>)
 80005b2:	f002 f97f 	bl	80028b4 <HAL_TIM_ConfigClockSource>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80005bc:	f000 f9a0 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005c0:	4818      	ldr	r0, [pc, #96]	@ (8000624 <MX_TIM2_Init+0xe8>)
 80005c2:	f001 ffbb 	bl	800253c <HAL_TIM_PWM_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80005cc:	f000 f998 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4619      	mov	r1, r3
 80005de:	4811      	ldr	r0, [pc, #68]	@ (8000624 <MX_TIM2_Init+0xe8>)
 80005e0:	f002 fce0 	bl	8002fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80005ea:	f000 f989 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ee:	2360      	movs	r3, #96	@ 0x60
 80005f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	4619      	mov	r1, r3
 8000604:	4807      	ldr	r0, [pc, #28]	@ (8000624 <MX_TIM2_Init+0xe8>)
 8000606:	f002 f893 	bl	8002730 <HAL_TIM_PWM_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000610:	f000 f976 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000614:	4803      	ldr	r0, [pc, #12]	@ (8000624 <MX_TIM2_Init+0xe8>)
 8000616:	f000 fc41 	bl	8000e9c <HAL_TIM_MspPostInit>

}
 800061a:	bf00      	nop
 800061c:	3738      	adds	r7, #56	@ 0x38
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000d4 	.word	0x200000d4

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063c:	4b4f      	ldr	r3, [pc, #316]	@ (800077c <MX_GPIO_Init+0x154>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a4e      	ldr	r2, [pc, #312]	@ (800077c <MX_GPIO_Init+0x154>)
 8000642:	f043 0310 	orr.w	r3, r3, #16
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b4c      	ldr	r3, [pc, #304]	@ (800077c <MX_GPIO_Init+0x154>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0310 	and.w	r3, r3, #16
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000654:	4b49      	ldr	r3, [pc, #292]	@ (800077c <MX_GPIO_Init+0x154>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a48      	ldr	r2, [pc, #288]	@ (800077c <MX_GPIO_Init+0x154>)
 800065a:	f043 0320 	orr.w	r3, r3, #32
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b46      	ldr	r3, [pc, #280]	@ (800077c <MX_GPIO_Init+0x154>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0320 	and.w	r3, r3, #32
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4b43      	ldr	r3, [pc, #268]	@ (800077c <MX_GPIO_Init+0x154>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a42      	ldr	r2, [pc, #264]	@ (800077c <MX_GPIO_Init+0x154>)
 8000672:	f043 0304 	orr.w	r3, r3, #4
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b40      	ldr	r3, [pc, #256]	@ (800077c <MX_GPIO_Init+0x154>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <MX_GPIO_Init+0x154>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <MX_GPIO_Init+0x154>)
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b3a      	ldr	r3, [pc, #232]	@ (800077c <MX_GPIO_Init+0x154>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0308 	and.w	r3, r3, #8
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a2:	4837      	ldr	r0, [pc, #220]	@ (8000780 <MX_GPIO_Init+0x158>)
 80006a4:	f000 ffd3 	bl	800164e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10
 80006a8:	2200      	movs	r2, #0
 80006aa:	f641 6114 	movw	r1, #7700	@ 0x1e14
 80006ae:	4835      	ldr	r0, [pc, #212]	@ (8000784 <MX_GPIO_Init+0x15c>)
 80006b0:	f000 ffcd 	bl	800164e <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80006b4:	2200      	movs	r2, #0
 80006b6:	f24f 3141 	movw	r1, #62273	@ 0xf341
 80006ba:	4833      	ldr	r0, [pc, #204]	@ (8000788 <MX_GPIO_Init+0x160>)
 80006bc:	f000 ffc7 	bl	800164e <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2302      	movs	r3, #2
 80006d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d2:	f107 0310 	add.w	r3, r7, #16
 80006d6:	4619      	mov	r1, r3
 80006d8:	4829      	ldr	r0, [pc, #164]	@ (8000780 <MX_GPIO_Init+0x158>)
 80006da:	f000 fe1d 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e2:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <MX_GPIO_Init+0x164>)
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	4619      	mov	r1, r3
 80006f0:	4824      	ldr	r0, [pc, #144]	@ (8000784 <MX_GPIO_Init+0x15c>)
 80006f2:	f000 fe11 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10
 80006f6:	f641 6314 	movw	r3, #7700	@ 0x1e14
 80006fa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2302      	movs	r3, #2
 8000706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	4619      	mov	r1, r3
 800070e:	481d      	ldr	r0, [pc, #116]	@ (8000784 <MX_GPIO_Init+0x15c>)
 8000710:	f000 fe02 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000714:	2340      	movs	r3, #64	@ 0x40
 8000716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4619      	mov	r1, r3
 8000726:	4817      	ldr	r0, [pc, #92]	@ (8000784 <MX_GPIO_Init+0x15c>)
 8000728:	f000 fdf6 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14
                           PB15 PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800072c:	f24f 3341 	movw	r3, #62273	@ 0xf341
 8000730:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2302      	movs	r3, #2
 800073c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	4619      	mov	r1, r3
 8000744:	4810      	ldr	r0, [pc, #64]	@ (8000788 <MX_GPIO_Init+0x160>)
 8000746:	f000 fde7 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 800074a:	f640 4302 	movw	r3, #3074	@ 0xc02
 800074e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	480a      	ldr	r0, [pc, #40]	@ (8000788 <MX_GPIO_Init+0x160>)
 8000760:	f000 fdda 	bl	8001318 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2102      	movs	r1, #2
 8000768:	2007      	movs	r0, #7
 800076a:	f000 fd9e 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800076e:	2007      	movs	r0, #7
 8000770:	f000 fdb7 	bl	80012e2 <HAL_NVIC_EnableIRQ>

/* USER CODE END MX_GPIO_Init_2 */
}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	40011000 	.word	0x40011000
 8000784:	40010800 	.word	0x40010800
 8000788:	40010c00 	.word	0x40010c00
 800078c:	10210000 	.word	0x10210000

08000790 <checkSensor>:

/* USER CODE BEGIN 4 */
// Function definition (implementation)
void checkSensor(GPIO_TypeDef *sensor_port, uint16_t sensor_pin, GPIO_TypeDef *led_green_port, uint16_t led_green_pin, GPIO_TypeDef *led_red_port, uint16_t led_red_pin, int *available_slots) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	607a      	str	r2, [r7, #4]
 800079a:	461a      	mov	r2, r3
 800079c:	460b      	mov	r3, r1
 800079e:	817b      	strh	r3, [r7, #10]
 80007a0:	4613      	mov	r3, r2
 80007a2:	813b      	strh	r3, [r7, #8]
    if (HAL_GPIO_ReadPin(sensor_port, sensor_pin) == GPIO_PIN_RESET) {
 80007a4:	897b      	ldrh	r3, [r7, #10]
 80007a6:	4619      	mov	r1, r3
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f000 ff39 	bl	8001620 <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d111      	bne.n	80007d8 <checkSensor+0x48>
        HAL_GPIO_WritePin(led_green_port, led_green_pin, GPIO_PIN_SET);  // Green LED ON
 80007b4:	893b      	ldrh	r3, [r7, #8]
 80007b6:	2201      	movs	r2, #1
 80007b8:	4619      	mov	r1, r3
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f000 ff47 	bl	800164e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(led_red_port, led_red_pin, GPIO_PIN_RESET);   // Red LED OFF
 80007c0:	8bbb      	ldrh	r3, [r7, #28]
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	69b8      	ldr	r0, [r7, #24]
 80007c8:	f000 ff41 	bl	800164e <HAL_GPIO_WritePin>
        (*available_slots)--;
 80007cc:	6a3b      	ldr	r3, [r7, #32]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	6a3b      	ldr	r3, [r7, #32]
 80007d4:	601a      	str	r2, [r3, #0]
    } else {
        HAL_GPIO_WritePin(led_green_port, led_green_pin, GPIO_PIN_RESET); // Green LED OFF
        HAL_GPIO_WritePin(led_red_port, led_red_pin, GPIO_PIN_SET);      // Red LED ON
    }
}
 80007d6:	e00b      	b.n	80007f0 <checkSensor+0x60>
        HAL_GPIO_WritePin(led_green_port, led_green_pin, GPIO_PIN_RESET); // Green LED OFF
 80007d8:	893b      	ldrh	r3, [r7, #8]
 80007da:	2200      	movs	r2, #0
 80007dc:	4619      	mov	r1, r3
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 ff35 	bl	800164e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(led_red_port, led_red_pin, GPIO_PIN_SET);      // Red LED ON
 80007e4:	8bbb      	ldrh	r3, [r7, #28]
 80007e6:	2201      	movs	r2, #1
 80007e8:	4619      	mov	r1, r3
 80007ea:	69b8      	ldr	r0, [r7, #24]
 80007ec:	f000 ff2f 	bl	800164e <HAL_GPIO_WritePin>
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <HC595write>:
void HC595write(uint8_t val)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
    for(int i = 0; i < 8; i++)
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	e021      	b.n	800084c <HC595write+0x54>
    {
        if(val & (1 << i))
 8000808:	79fa      	ldrb	r2, [r7, #7]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	fa42 f303 	asr.w	r3, r2, r3
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	2b00      	cmp	r3, #0
 8000816:	d005      	beq.n	8000824 <HC595write+0x2c>
        {
            HAL_GPIO_WritePin(SER_PORT, SER_PIN, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2140      	movs	r1, #64	@ 0x40
 800081c:	4815      	ldr	r0, [pc, #84]	@ (8000874 <HC595write+0x7c>)
 800081e:	f000 ff16 	bl	800164e <HAL_GPIO_WritePin>
 8000822:	e004      	b.n	800082e <HC595write+0x36>
        }
        else
        {
            HAL_GPIO_WritePin(SER_PORT, SER_PIN, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2140      	movs	r1, #64	@ 0x40
 8000828:	4812      	ldr	r0, [pc, #72]	@ (8000874 <HC595write+0x7c>)
 800082a:	f000 ff10 	bl	800164e <HAL_GPIO_WritePin>
        }
        HAL_GPIO_WritePin(SRCLK_PORT, SRCLK_PIN, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000834:	480f      	ldr	r0, [pc, #60]	@ (8000874 <HC595write+0x7c>)
 8000836:	f000 ff0a 	bl	800164e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SRCLK_PORT, SRCLK_PIN, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000840:	480c      	ldr	r0, [pc, #48]	@ (8000874 <HC595write+0x7c>)
 8000842:	f000 ff04 	bl	800164e <HAL_GPIO_WritePin>
    for(int i = 0; i < 8; i++)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b07      	cmp	r3, #7
 8000850:	ddda      	ble.n	8000808 <HC595write+0x10>
    }
    HAL_GPIO_WritePin(RCLK_PORT, RCLK_PIN, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000858:	4806      	ldr	r0, [pc, #24]	@ (8000874 <HC595write+0x7c>)
 800085a:	f000 fef8 	bl	800164e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RCLK_PORT, RCLK_PIN, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000864:	4803      	ldr	r0, [pc, #12]	@ (8000874 <HC595write+0x7c>)
 8000866:	f000 fef2 	bl	800164e <HAL_GPIO_WritePin>
}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40010c00 	.word	0x40010c00

08000878 <EXTI1_IRQHandler>:

// ISR for EXTI Line (IR sensor interrupt)
void EXTI1_IRQHandler(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1)) {
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <EXTI1_IRQHandler+0x44>)
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	f003 0302 	and.w	r3, r3, #2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d017      	beq.n	80008b8 <EXTI1_IRQHandler+0x40>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <EXTI1_IRQHandler+0x44>)
 800088a:	2202      	movs	r2, #2
 800088c:	615a      	str	r2, [r3, #20]
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {
 800088e:	2102      	movs	r1, #2
 8000890:	480b      	ldr	r0, [pc, #44]	@ (80008c0 <EXTI1_IRQHandler+0x48>)
 8000892:	f000 fec5 	bl	8001620 <HAL_GPIO_ReadPin>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d108      	bne.n	80008ae <EXTI1_IRQHandler+0x36>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);  // Turn on LED
 800089c:	2201      	movs	r2, #1
 800089e:	2104      	movs	r1, #4
 80008a0:	4807      	ldr	r0, [pc, #28]	@ (80008c0 <EXTI1_IRQHandler+0x48>)
 80008a2:	f000 fed4 	bl	800164e <HAL_GPIO_WritePin>
            servo_action_flag = 1;  // Set flag to move servo in main loop
 80008a6:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <EXTI1_IRQHandler+0x4c>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
        } else {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);  // Turn off LED
        }
    }
}
 80008ac:	e004      	b.n	80008b8 <EXTI1_IRQHandler+0x40>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);  // Turn off LED
 80008ae:	2200      	movs	r2, #0
 80008b0:	2104      	movs	r1, #4
 80008b2:	4803      	ldr	r0, [pc, #12]	@ (80008c0 <EXTI1_IRQHandler+0x48>)
 80008b4:	f000 fecb 	bl	800164e <HAL_GPIO_WritePin>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40010400 	.word	0x40010400
 80008c0:	40010800 	.word	0x40010800
 80008c4:	20000135 	.word	0x20000135

080008c8 <openServo>:



// Function to open the servo
void openServo(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);  // Adjust for your servo's open position
 80008cc:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <openServo+0x18>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	200000d4 	.word	0x200000d4

080008e4 <closeServo>:

// Function to close the servo
void closeServo(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2000);  // Adjust for your servo's closed position
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <closeServo+0x18>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80008f0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	200000d4 	.word	0x200000d4

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <Error_Handler+0x8>

0800090c <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af02      	add	r7, sp, #8
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000916:	f107 020f 	add.w	r2, r7, #15
 800091a:	1df9      	adds	r1, r7, #7
 800091c:	2364      	movs	r3, #100	@ 0x64
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2301      	movs	r3, #1
 8000922:	4804      	ldr	r0, [pc, #16]	@ (8000934 <RC522_SPI_Transfer+0x28>)
 8000924:	f001 fb0e 	bl	8001f44 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000928:	7bfb      	ldrb	r3, [r7, #15]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000034 	.word	0x20000034

08000938 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	460a      	mov	r2, r1
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	4613      	mov	r3, r2
 8000946:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2110      	movs	r1, #16
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <Write_MFRC522+0x48>)
 800094e:	f000 fe7e 	bl	800164e <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ffd4 	bl	800090c <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ffd0 	bl	800090c <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2110      	movs	r1, #16
 8000970:	4803      	ldr	r0, [pc, #12]	@ (8000980 <Write_MFRC522+0x48>)
 8000972:	f000 fe6c 	bl	800164e <HAL_GPIO_WritePin>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40010800 	.word	0x40010800

08000984 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2110      	movs	r1, #16
 8000992:	480f      	ldr	r0, [pc, #60]	@ (80009d0 <Read_MFRC522+0x4c>)
 8000994:	f000 fe5b 	bl	800164e <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	b25b      	sxtb	r3, r3
 800099e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ffad 	bl	800090c <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ffaa 	bl	800090c <RC522_SPI_Transfer>
 80009b8:	4603      	mov	r3, r0
 80009ba:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2110      	movs	r1, #16
 80009c0:	4803      	ldr	r0, [pc, #12]	@ (80009d0 <Read_MFRC522+0x4c>)
 80009c2:	f000 fe44 	bl	800164e <HAL_GPIO_WritePin>

	return val;
 80009c6:	7bfb      	ldrb	r3, [r7, #15]

}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40010800 	.word	0x40010800

080009d4 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	460a      	mov	r2, r1
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ffcc 	bl	8000984 <Read_MFRC522>
 80009ec:	4603      	mov	r3, r0
 80009ee:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80009f0:	7bfa      	ldrb	r2, [r7, #15]
 80009f2:	79bb      	ldrb	r3, [r7, #6]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff9b 	bl	8000938 <Write_MFRC522>
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	460a      	mov	r2, r1
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	4613      	mov	r3, r2
 8000a18:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ffb1 	bl	8000984 <Read_MFRC522>
 8000a22:	4603      	mov	r3, r0
 8000a24:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000a26:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	b25a      	sxtb	r2, r3
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4013      	ands	r3, r2
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff7b 	bl	8000938 <Write_MFRC522>
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000a4e:	2014      	movs	r0, #20
 8000a50:	f7ff ff98 	bl	8000984 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000a54:	2103      	movs	r1, #3
 8000a56:	2014      	movs	r0, #20
 8000a58:	f7ff ffbc 	bl	80009d4 <SetBitMask>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000a64:	210f      	movs	r1, #15
 8000a66:	2001      	movs	r0, #1
 8000a68:	f7ff ff66 	bl	8000938 <Write_MFRC522>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2110      	movs	r1, #16
 8000a78:	4812      	ldr	r0, [pc, #72]	@ (8000ac4 <MFRC522_Init+0x54>)
 8000a7a:	f000 fde8 	bl	800164e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2101      	movs	r1, #1
 8000a82:	4811      	ldr	r0, [pc, #68]	@ (8000ac8 <MFRC522_Init+0x58>)
 8000a84:	f000 fde3 	bl	800164e <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000a88:	f7ff ffea 	bl	8000a60 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000a8c:	218d      	movs	r1, #141	@ 0x8d
 8000a8e:	202a      	movs	r0, #42	@ 0x2a
 8000a90:	f7ff ff52 	bl	8000938 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000a94:	213e      	movs	r1, #62	@ 0x3e
 8000a96:	202b      	movs	r0, #43	@ 0x2b
 8000a98:	f7ff ff4e 	bl	8000938 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000a9c:	211e      	movs	r1, #30
 8000a9e:	202d      	movs	r0, #45	@ 0x2d
 8000aa0:	f7ff ff4a 	bl	8000938 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	202c      	movs	r0, #44	@ 0x2c
 8000aa8:	f7ff ff46 	bl	8000938 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000aac:	2140      	movs	r1, #64	@ 0x40
 8000aae:	2015      	movs	r0, #21
 8000ab0:	f7ff ff42 	bl	8000938 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000ab4:	213d      	movs	r1, #61	@ 0x3d
 8000ab6:	2011      	movs	r0, #17
 8000ab8:	f7ff ff3e 	bl	8000938 <Write_MFRC522>

	AntennaOn();
 8000abc:	f7ff ffc5 	bl	8000a4a <AntennaOn>
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40010800 	.word	0x40010800
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b089      	sub	sp, #36	@ 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	4613      	mov	r3, r2
 8000adc:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	2b0c      	cmp	r3, #12
 8000aee:	d006      	beq.n	8000afe <MFRC522_ToCard+0x32>
 8000af0:	2b0e      	cmp	r3, #14
 8000af2:	d109      	bne.n	8000b08 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000af4:	2312      	movs	r3, #18
 8000af6:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000af8:	2310      	movs	r3, #16
 8000afa:	777b      	strb	r3, [r7, #29]
			break;
 8000afc:	e005      	b.n	8000b0a <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000afe:	2377      	movs	r3, #119	@ 0x77
 8000b00:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000b02:	2330      	movs	r3, #48	@ 0x30
 8000b04:	777b      	strb	r3, [r7, #29]
			break;
 8000b06:	e000      	b.n	8000b0a <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000b08:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000b0a:	7fbb      	ldrb	r3, [r7, #30]
 8000b0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	4619      	mov	r1, r3
 8000b14:	2002      	movs	r0, #2
 8000b16:	f7ff ff0f 	bl	8000938 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000b1a:	2180      	movs	r1, #128	@ 0x80
 8000b1c:	2004      	movs	r0, #4
 8000b1e:	f7ff ff74 	bl	8000a0a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000b22:	2180      	movs	r1, #128	@ 0x80
 8000b24:	200a      	movs	r0, #10
 8000b26:	f7ff ff55 	bl	80009d4 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff ff03 	bl	8000938 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	e00a      	b.n	8000b4e <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	2009      	movs	r0, #9
 8000b44:	f7ff fef8 	bl	8000938 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	7bbb      	ldrb	r3, [r7, #14]
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d3f0      	bcc.n	8000b38 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff feec 	bl	8000938 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	2b0c      	cmp	r3, #12
 8000b64:	d103      	bne.n	8000b6e <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000b66:	2180      	movs	r1, #128	@ 0x80
 8000b68:	200d      	movs	r0, #13
 8000b6a:	f7ff ff33 	bl	80009d4 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000b6e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b72:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000b74:	2004      	movs	r0, #4
 8000b76:	f7ff ff05 	bl	8000984 <Read_MFRC522>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	773b      	strb	r3, [r7, #28]
        i--;
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	3b01      	subs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d00a      	beq.n	8000ba0 <MFRC522_ToCard+0xd4>
 8000b8a:	7f3b      	ldrb	r3, [r7, #28]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d105      	bne.n	8000ba0 <MFRC522_ToCard+0xd4>
 8000b94:	7f3a      	ldrb	r2, [r7, #28]
 8000b96:	7f7b      	ldrb	r3, [r7, #29]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d0e9      	beq.n	8000b74 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	200d      	movs	r0, #13
 8000ba4:	f7ff ff31 	bl	8000a0a <ClearBitMask>

    if (i != 0)
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d052      	beq.n	8000c54 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000bae:	2006      	movs	r0, #6
 8000bb0:	f7ff fee8 	bl	8000984 <Read_MFRC522>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f003 031b 	and.w	r3, r3, #27
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d148      	bne.n	8000c50 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000bc2:	7f3a      	ldrb	r2, [r7, #28]
 8000bc4:	7fbb      	ldrb	r3, [r7, #30]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	2b0c      	cmp	r3, #12
 8000bda:	d13b      	bne.n	8000c54 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000bdc:	200a      	movs	r0, #10
 8000bde:	f7ff fed1 	bl	8000984 <Read_MFRC522>
 8000be2:	4603      	mov	r3, r0
 8000be4:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000be6:	200c      	movs	r0, #12
 8000be8:	f7ff fecc 	bl	8000984 <Read_MFRC522>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d008      	beq.n	8000c0c <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8000bfa:	7f3b      	ldrb	r3, [r7, #28]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	00da      	lsls	r2, r3, #3
 8000c00:	7dfb      	ldrb	r3, [r7, #23]
 8000c02:	4413      	add	r3, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e004      	b.n	8000c16 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8000c0c:	7f3b      	ldrb	r3, [r7, #28]
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	461a      	mov	r2, r3
 8000c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c14:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8000c16:	7f3b      	ldrb	r3, [r7, #28]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000c20:	7f3b      	ldrb	r3, [r7, #28]
 8000c22:	2b10      	cmp	r3, #16
 8000c24:	d901      	bls.n	8000c2a <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8000c26:	2310      	movs	r3, #16
 8000c28:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	e00a      	b.n	8000c46 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	18d4      	adds	r4, r2, r3
 8000c36:	2009      	movs	r0, #9
 8000c38:	f7ff fea4 	bl	8000984 <Read_MFRC522>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	3301      	adds	r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	7f3b      	ldrb	r3, [r7, #28]
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d3f0      	bcc.n	8000c30 <MFRC522_ToCard+0x164>
 8000c4e:	e001      	b.n	8000c54 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000c50:	2302      	movs	r3, #2
 8000c52:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	@ 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd90      	pop	{r4, r7, pc}

08000c5e <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af02      	add	r7, sp, #8
 8000c64:	4603      	mov	r3, r0
 8000c66:	6039      	str	r1, [r7, #0]
 8000c68:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000c6a:	2107      	movs	r1, #7
 8000c6c:	200d      	movs	r0, #13
 8000c6e:	f7ff fe63 	bl	8000938 <Write_MFRC522>

	TagType[0] = reqMode;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	79fa      	ldrb	r2, [r7, #7]
 8000c76:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2201      	movs	r2, #1
 8000c82:	6839      	ldr	r1, [r7, #0]
 8000c84:	200c      	movs	r0, #12
 8000c86:	f7ff ff21 	bl	8000acc <MFRC522_ToCard>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <MFRC522_Request+0x3c>
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b10      	cmp	r3, #16
 8000c98:	d001      	beq.n	8000c9e <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	200d      	movs	r0, #13
 8000cb8:	f7ff fe3e 	bl	8000938 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2293      	movs	r2, #147	@ 0x93
 8000cc0:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	200c      	movs	r0, #12
 8000cd8:	f7ff fef8 	bl	8000acc <MFRC522_ToCard>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d118      	bne.n	8000d18 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73bb      	strb	r3, [r7, #14]
 8000cea:	e009      	b.n	8000d00 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	7b7b      	ldrb	r3, [r7, #13]
 8000cf6:	4053      	eors	r3, r2
 8000cf8:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	73bb      	strb	r3, [r7, #14]
 8000d00:	7bbb      	ldrb	r3, [r7, #14]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d9f2      	bls.n	8000cec <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000d06:	7bbb      	ldrb	r3, [r7, #14]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	7b7a      	ldrb	r2, [r7, #13]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d001      	beq.n	8000d18 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8000d14:	2302      	movs	r3, #2
 8000d16:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4a14      	ldr	r2, [pc, #80]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6193      	str	r3, [r2, #24]
 8000d36:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a0e      	ldr	r2, [pc, #56]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <HAL_MspInit+0x60>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_MspInit+0x60>)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010000 	.word	0x40010000

08000d88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	@ 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a22      	ldr	r2, [pc, #136]	@ (8000e2c <HAL_SPI_MspInit+0xa4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d13d      	bne.n	8000e24 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000da8:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <HAL_SPI_MspInit+0xa8>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a20      	ldr	r2, [pc, #128]	@ (8000e30 <HAL_SPI_MspInit+0xa8>)
 8000dae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <HAL_SPI_MspInit+0xa8>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <HAL_SPI_MspInit+0xa8>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8000e30 <HAL_SPI_MspInit+0xa8>)
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <HAL_SPI_MspInit+0xa8>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000dd8:	2328      	movs	r3, #40	@ 0x28
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4812      	ldr	r0, [pc, #72]	@ (8000e34 <HAL_SPI_MspInit+0xac>)
 8000dec:	f000 fa94 	bl	8001318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000df0:	2310      	movs	r3, #16
 8000df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <HAL_SPI_MspInit+0xac>)
 8000e04:	f000 fa88 	bl	8001318 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <HAL_SPI_MspInit+0xb0>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e10:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e1e:	4a06      	ldr	r2, [pc, #24]	@ (8000e38 <HAL_SPI_MspInit+0xb0>)
 8000e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e22:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	@ 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40013000 	.word	0x40013000
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010c00 	.word	0x40010c00
 8000e38:	40010000 	.word	0x40010000

08000e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <HAL_TIM_Base_MspInit+0x58>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10c      	bne.n	8000e68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e4e:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_TIM_Base_MspInit+0x5c>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a11      	ldr	r2, [pc, #68]	@ (8000e98 <HAL_TIM_Base_MspInit+0x5c>)
 8000e54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <HAL_TIM_Base_MspInit+0x5c>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e66:	e010      	b.n	8000e8a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e70:	d10b      	bne.n	8000e8a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e72:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <HAL_TIM_Base_MspInit+0x5c>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	4a08      	ldr	r2, [pc, #32]	@ (8000e98 <HAL_TIM_Base_MspInit+0x5c>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	61d3      	str	r3, [r2, #28]
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_TIM_Base_MspInit+0x5c>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40012c00 	.word	0x40012c00
 8000e98:	40021000 	.word	0x40021000

08000e9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f34 <HAL_TIM_MspPostInit+0x98>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d119      	bne.n	8000ef0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <HAL_TIM_MspPostInit+0x9c>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f38 <HAL_TIM_MspPostInit+0x9c>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <HAL_TIM_MspPostInit+0x9c>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ed4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ed8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4814      	ldr	r0, [pc, #80]	@ (8000f3c <HAL_TIM_MspPostInit+0xa0>)
 8000eea:	f000 fa15 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000eee:	e01c      	b.n	8000f2a <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ef8:	d117      	bne.n	8000f2a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <HAL_TIM_MspPostInit+0x9c>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	4a0e      	ldr	r2, [pc, #56]	@ (8000f38 <HAL_TIM_MspPostInit+0x9c>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6193      	str	r3, [r2, #24]
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <HAL_TIM_MspPostInit+0x9c>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f12:	2301      	movs	r3, #1
 8000f14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0310 	add.w	r3, r7, #16
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <HAL_TIM_MspPostInit+0xa0>)
 8000f26:	f000 f9f7 	bl	8001318 <HAL_GPIO_Init>
}
 8000f2a:	bf00      	nop
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40012c00 	.word	0x40012c00
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010800 	.word	0x40010800

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <NMI_Handler+0x4>

08000f48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <MemManage_Handler+0x4>

08000f58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f874 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fa4:	f7ff fff8 	bl	8000f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa8:	480b      	ldr	r0, [pc, #44]	@ (8000fd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000faa:	490c      	ldr	r1, [pc, #48]	@ (8000fdc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fac:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a09      	ldr	r2, [pc, #36]	@ (8000fe4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fc0:	4c09      	ldr	r4, [pc, #36]	@ (8000fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fce:	f002 f8a1 	bl	8003114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd2:	f7ff f8bb 	bl	800014c <main>
  bx lr
 8000fd6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000fe0:	080031a0 	.word	0x080031a0
  ldr r2, =_sbss
 8000fe4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000fe8:	2000013c 	.word	0x2000013c

08000fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC1_2_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <HAL_Init+0x28>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	@ (8001018 <HAL_Init+0x28>)
 8000ffa:	f043 0310 	orr.w	r3, r3, #16
 8000ffe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f947 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	200f      	movs	r0, #15
 8001008:	f000 f808 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff fe8a 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40022000 	.word	0x40022000

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f95f 	bl	80012fe <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f927 	bl	80012aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	@ (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2000000c 	.word	0x2000000c
 8001074:	20000014 	.word	0x20000014
 8001078:	20000010 	.word	0x20000010

0800107c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <HAL_IncTick+0x1c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b05      	ldr	r3, [pc, #20]	@ (800109c <HAL_IncTick+0x20>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a03      	ldr	r2, [pc, #12]	@ (800109c <HAL_IncTick+0x20>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	20000014 	.word	0x20000014
 800109c:	20000138 	.word	0x20000138

080010a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b02      	ldr	r3, [pc, #8]	@ (80010b0 <HAL_GetTick+0x10>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	20000138 	.word	0x20000138

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff fff0 	bl	80010a0 <HAL_GetTick>
 80010c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_Delay+0x44>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010da:	bf00      	nop
 80010dc:	f7ff ffe0 	bl	80010a0 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000014 	.word	0x20000014

080010fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001118:	4013      	ands	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001124:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	@ (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <__NVIC_GetPriorityGrouping+0x18>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	f003 0307 	and.w	r3, r3, #7
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db0b      	blt.n	800118a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f003 021f 	and.w	r2, r3, #31
 8001178:	4906      	ldr	r1, [pc, #24]	@ (8001194 <__NVIC_EnableIRQ+0x34>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	095b      	lsrs	r3, r3, #5
 8001180:	2001      	movs	r0, #1
 8001182:	fa00 f202 	lsl.w	r2, r0, r2
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	@ (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	@ (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	@ 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	@ 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f7ff ff90 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff2d 	bl	80010fc <__NVIC_SetPriorityGrouping>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff42 	bl	8001144 <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff90 	bl	80011ec <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5f 	bl	8001198 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff35 	bl	8001160 <__NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffa2 	bl	8001250 <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b08b      	sub	sp, #44	@ 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	e169      	b.n	8001600 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800132c:	2201      	movs	r2, #1
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	429a      	cmp	r2, r3
 8001346:	f040 8158 	bne.w	80015fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4a9a      	ldr	r2, [pc, #616]	@ (80015b8 <HAL_GPIO_Init+0x2a0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d05e      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001354:	4a98      	ldr	r2, [pc, #608]	@ (80015b8 <HAL_GPIO_Init+0x2a0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d875      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800135a:	4a98      	ldr	r2, [pc, #608]	@ (80015bc <HAL_GPIO_Init+0x2a4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d058      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001360:	4a96      	ldr	r2, [pc, #600]	@ (80015bc <HAL_GPIO_Init+0x2a4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d86f      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001366:	4a96      	ldr	r2, [pc, #600]	@ (80015c0 <HAL_GPIO_Init+0x2a8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d052      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 800136c:	4a94      	ldr	r2, [pc, #592]	@ (80015c0 <HAL_GPIO_Init+0x2a8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d869      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001372:	4a94      	ldr	r2, [pc, #592]	@ (80015c4 <HAL_GPIO_Init+0x2ac>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d04c      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001378:	4a92      	ldr	r2, [pc, #584]	@ (80015c4 <HAL_GPIO_Init+0x2ac>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d863      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800137e:	4a92      	ldr	r2, [pc, #584]	@ (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d046      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001384:	4a90      	ldr	r2, [pc, #576]	@ (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d85d      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800138a:	2b12      	cmp	r3, #18
 800138c:	d82a      	bhi.n	80013e4 <HAL_GPIO_Init+0xcc>
 800138e:	2b12      	cmp	r3, #18
 8001390:	d859      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001392:	a201      	add	r2, pc, #4	@ (adr r2, 8001398 <HAL_GPIO_Init+0x80>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	08001413 	.word	0x08001413
 800139c:	080013ed 	.word	0x080013ed
 80013a0:	080013ff 	.word	0x080013ff
 80013a4:	08001441 	.word	0x08001441
 80013a8:	08001447 	.word	0x08001447
 80013ac:	08001447 	.word	0x08001447
 80013b0:	08001447 	.word	0x08001447
 80013b4:	08001447 	.word	0x08001447
 80013b8:	08001447 	.word	0x08001447
 80013bc:	08001447 	.word	0x08001447
 80013c0:	08001447 	.word	0x08001447
 80013c4:	08001447 	.word	0x08001447
 80013c8:	08001447 	.word	0x08001447
 80013cc:	08001447 	.word	0x08001447
 80013d0:	08001447 	.word	0x08001447
 80013d4:	08001447 	.word	0x08001447
 80013d8:	08001447 	.word	0x08001447
 80013dc:	080013f5 	.word	0x080013f5
 80013e0:	08001409 	.word	0x08001409
 80013e4:	4a79      	ldr	r2, [pc, #484]	@ (80015cc <HAL_GPIO_Init+0x2b4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013ea:	e02c      	b.n	8001446 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	623b      	str	r3, [r7, #32]
          break;
 80013f2:	e029      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	3304      	adds	r3, #4
 80013fa:	623b      	str	r3, [r7, #32]
          break;
 80013fc:	e024      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	3308      	adds	r3, #8
 8001404:	623b      	str	r3, [r7, #32]
          break;
 8001406:	e01f      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	330c      	adds	r3, #12
 800140e:	623b      	str	r3, [r7, #32]
          break;
 8001410:	e01a      	b.n	8001448 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800141a:	2304      	movs	r3, #4
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e013      	b.n	8001448 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001428:	2308      	movs	r3, #8
 800142a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	611a      	str	r2, [r3, #16]
          break;
 8001432:	e009      	b.n	8001448 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001434:	2308      	movs	r3, #8
 8001436:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	615a      	str	r2, [r3, #20]
          break;
 800143e:	e003      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x130>
          break;
 8001446:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2bff      	cmp	r3, #255	@ 0xff
 800144c:	d801      	bhi.n	8001452 <HAL_GPIO_Init+0x13a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	e001      	b.n	8001456 <HAL_GPIO_Init+0x13e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3304      	adds	r3, #4
 8001456:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2bff      	cmp	r3, #255	@ 0xff
 800145c:	d802      	bhi.n	8001464 <HAL_GPIO_Init+0x14c>
 800145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0x152>
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	3b08      	subs	r3, #8
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	210f      	movs	r1, #15
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	401a      	ands	r2, r3
 800147c:	6a39      	ldr	r1, [r7, #32]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	431a      	orrs	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80b1 	beq.w	80015fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001498:	4b4d      	ldr	r3, [pc, #308]	@ (80015d0 <HAL_GPIO_Init+0x2b8>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a4c      	ldr	r2, [pc, #304]	@ (80015d0 <HAL_GPIO_Init+0x2b8>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b4a      	ldr	r3, [pc, #296]	@ (80015d0 <HAL_GPIO_Init+0x2b8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014b0:	4a48      	ldr	r2, [pc, #288]	@ (80015d4 <HAL_GPIO_Init+0x2bc>)
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a40      	ldr	r2, [pc, #256]	@ (80015d8 <HAL_GPIO_Init+0x2c0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d013      	beq.n	8001504 <HAL_GPIO_Init+0x1ec>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a3f      	ldr	r2, [pc, #252]	@ (80015dc <HAL_GPIO_Init+0x2c4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d00d      	beq.n	8001500 <HAL_GPIO_Init+0x1e8>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a3e      	ldr	r2, [pc, #248]	@ (80015e0 <HAL_GPIO_Init+0x2c8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d007      	beq.n	80014fc <HAL_GPIO_Init+0x1e4>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3d      	ldr	r2, [pc, #244]	@ (80015e4 <HAL_GPIO_Init+0x2cc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_GPIO_Init+0x1e0>
 80014f4:	2303      	movs	r3, #3
 80014f6:	e006      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 80014f8:	2304      	movs	r3, #4
 80014fa:	e004      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 8001504:	2300      	movs	r3, #0
 8001506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001508:	f002 0203 	and.w	r2, r2, #3
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4093      	lsls	r3, r2
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001516:	492f      	ldr	r1, [pc, #188]	@ (80015d4 <HAL_GPIO_Init+0x2bc>)
 8001518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001530:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	492c      	ldr	r1, [pc, #176]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800153e:	4b2a      	ldr	r3, [pc, #168]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	4928      	ldr	r1, [pc, #160]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001548:	4013      	ands	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001558:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	4922      	ldr	r1, [pc, #136]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	60cb      	str	r3, [r1, #12]
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	43db      	mvns	r3, r3
 800156e:	491e      	ldr	r1, [pc, #120]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001570:	4013      	ands	r3, r2
 8001572:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001580:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	4918      	ldr	r1, [pc, #96]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800158e:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	43db      	mvns	r3, r3
 8001596:	4914      	ldr	r1, [pc, #80]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001598:	4013      	ands	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d021      	beq.n	80015ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015a8:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	490e      	ldr	r1, [pc, #56]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e021      	b.n	80015fa <HAL_GPIO_Init+0x2e2>
 80015b6:	bf00      	nop
 80015b8:	10320000 	.word	0x10320000
 80015bc:	10310000 	.word	0x10310000
 80015c0:	10220000 	.word	0x10220000
 80015c4:	10210000 	.word	0x10210000
 80015c8:	10120000 	.word	0x10120000
 80015cc:	10110000 	.word	0x10110000
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000
 80015d8:	40010800 	.word	0x40010800
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	40011000 	.word	0x40011000
 80015e4:	40011400 	.word	0x40011400
 80015e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <HAL_GPIO_Init+0x304>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4909      	ldr	r1, [pc, #36]	@ (800161c <HAL_GPIO_Init+0x304>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	3301      	adds	r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	f47f ae8e 	bne.w	800132c <HAL_GPIO_Init+0x14>
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	372c      	adds	r7, #44	@ 0x2c
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40010400 	.word	0x40010400

08001620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e001      	b.n	8001642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	807b      	strh	r3, [r7, #2]
 800165a:	4613      	mov	r3, r2
 800165c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165e:	787b      	ldrb	r3, [r7, #1]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001664:	887a      	ldrh	r2, [r7, #2]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800166a:	e003      	b.n	8001674 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	041a      	lsls	r2, r3, #16
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	611a      	str	r2, [r3, #16]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
	...

08001680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e272      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 8087 	beq.w	80017ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a0:	4b92      	ldr	r3, [pc, #584]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d00c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ac:	4b8f      	ldr	r3, [pc, #572]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d112      	bne.n	80016de <HAL_RCC_OscConfig+0x5e>
 80016b8:	4b8c      	ldr	r3, [pc, #560]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c4:	d10b      	bne.n	80016de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c6:	4b89      	ldr	r3, [pc, #548]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d06c      	beq.n	80017ac <HAL_RCC_OscConfig+0x12c>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d168      	bne.n	80017ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e24c      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x76>
 80016e8:	4b80      	ldr	r3, [pc, #512]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a7f      	ldr	r2, [pc, #508]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e02e      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x98>
 80016fe:	4b7b      	ldr	r3, [pc, #492]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a7a      	ldr	r2, [pc, #488]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001704:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b78      	ldr	r3, [pc, #480]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a77      	ldr	r2, [pc, #476]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001710:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e01d      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0xbc>
 8001722:	4b72      	ldr	r3, [pc, #456]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a71      	ldr	r2, [pc, #452]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b6f      	ldr	r3, [pc, #444]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a6e      	ldr	r2, [pc, #440]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 800173c:	4b6b      	ldr	r3, [pc, #428]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a6a      	ldr	r2, [pc, #424]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b68      	ldr	r3, [pc, #416]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a67      	ldr	r2, [pc, #412]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001752:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d013      	beq.n	8001784 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fca0 	bl	80010a0 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff fc9c 	bl	80010a0 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	@ 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e200      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b5d      	ldr	r3, [pc, #372]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0xe4>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fc8c 	bl	80010a0 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fc88 	bl	80010a0 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	@ 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1ec      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	4b53      	ldr	r3, [pc, #332]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x10c>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d063      	beq.n	8001882 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ba:	4b4c      	ldr	r3, [pc, #304]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017c6:	4b49      	ldr	r3, [pc, #292]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d11c      	bne.n	800180c <HAL_RCC_OscConfig+0x18c>
 80017d2:	4b46      	ldr	r3, [pc, #280]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d116      	bne.n	800180c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017de:	4b43      	ldr	r3, [pc, #268]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <HAL_RCC_OscConfig+0x176>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e1c0      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	4b3d      	ldr	r3, [pc, #244]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4939      	ldr	r1, [pc, #228]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180a:	e03a      	b.n	8001882 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d020      	beq.n	8001856 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001814:	4b36      	ldr	r3, [pc, #216]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff fc41 	bl	80010a0 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff fc3d 	bl	80010a0 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e1a1      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001834:	4b2d      	ldr	r3, [pc, #180]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b2a      	ldr	r3, [pc, #168]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4927      	ldr	r1, [pc, #156]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
 8001854:	e015      	b.n	8001882 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001856:	4b26      	ldr	r3, [pc, #152]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fc20 	bl	80010a0 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fc1c 	bl	80010a0 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e180      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d03a      	beq.n	8001904 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d019      	beq.n	80018ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001896:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <HAL_RCC_OscConfig+0x274>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7ff fc00 	bl	80010a0 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a4:	f7ff fbfc 	bl	80010a0 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e160      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <HAL_RCC_OscConfig+0x26c>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018c2:	2001      	movs	r0, #1
 80018c4:	f000 fa9c 	bl	8001e00 <RCC_Delay>
 80018c8:	e01c      	b.n	8001904 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_RCC_OscConfig+0x274>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7ff fbe6 	bl	80010a0 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d6:	e00f      	b.n	80018f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff fbe2 	bl	80010a0 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d908      	bls.n	80018f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e146      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	42420000 	.word	0x42420000
 80018f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	4b92      	ldr	r3, [pc, #584]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1e9      	bne.n	80018d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80a6 	beq.w	8001a5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001916:	4b8b      	ldr	r3, [pc, #556]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10d      	bne.n	800193e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	4b88      	ldr	r3, [pc, #544]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a87      	ldr	r2, [pc, #540]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b85      	ldr	r3, [pc, #532]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193a:	2301      	movs	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	4b82      	ldr	r3, [pc, #520]	@ (8001b48 <HAL_RCC_OscConfig+0x4c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d118      	bne.n	800197c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b48 <HAL_RCC_OscConfig+0x4c8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7e      	ldr	r2, [pc, #504]	@ (8001b48 <HAL_RCC_OscConfig+0x4c8>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001956:	f7ff fba3 	bl	80010a0 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195e:	f7ff fb9f 	bl	80010a0 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b64      	cmp	r3, #100	@ 0x64
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e103      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	4b75      	ldr	r3, [pc, #468]	@ (8001b48 <HAL_RCC_OscConfig+0x4c8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x312>
 8001984:	4b6f      	ldr	r3, [pc, #444]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4a6e      	ldr	r2, [pc, #440]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6213      	str	r3, [r2, #32]
 8001990:	e02d      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x334>
 800199a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a69      	ldr	r2, [pc, #420]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	4b67      	ldr	r3, [pc, #412]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a66      	ldr	r2, [pc, #408]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	f023 0304 	bic.w	r3, r3, #4
 80019b0:	6213      	str	r3, [r2, #32]
 80019b2:	e01c      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	d10c      	bne.n	80019d6 <HAL_RCC_OscConfig+0x356>
 80019bc:	4b61      	ldr	r3, [pc, #388]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a60      	ldr	r2, [pc, #384]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6213      	str	r3, [r2, #32]
 80019d4:	e00b      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 80019d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a5a      	ldr	r2, [pc, #360]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6213      	str	r3, [r2, #32]
 80019e2:	4b58      	ldr	r3, [pc, #352]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	4a57      	ldr	r2, [pc, #348]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d015      	beq.n	8001a22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f6:	f7ff fb53 	bl	80010a0 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7ff fb4f 	bl	80010a0 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e0b1      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	4b4b      	ldr	r3, [pc, #300]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ee      	beq.n	80019fe <HAL_RCC_OscConfig+0x37e>
 8001a20:	e014      	b.n	8001a4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fb3d 	bl	80010a0 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff fb39 	bl	80010a0 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e09b      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a40:	4b40      	ldr	r3, [pc, #256]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ee      	bne.n	8001a2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d105      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a52:	4b3c      	ldr	r3, [pc, #240]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a3b      	ldr	r2, [pc, #236]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8087 	beq.w	8001b76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a68:	4b36      	ldr	r3, [pc, #216]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d061      	beq.n	8001b38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d146      	bne.n	8001b0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7c:	4b33      	ldr	r3, [pc, #204]	@ (8001b4c <HAL_RCC_OscConfig+0x4cc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7ff fb0d 	bl	80010a0 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff fb09 	bl	80010a0 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e06d      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9c:	4b29      	ldr	r3, [pc, #164]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ab0:	d108      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ab2:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	4921      	ldr	r1, [pc, #132]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a19      	ldr	r1, [r3, #32]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	491b      	ldr	r1, [pc, #108]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001adc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <HAL_RCC_OscConfig+0x4cc>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fadd 	bl	80010a0 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aea:	f7ff fad9 	bl	80010a0 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e03d      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x46a>
 8001b08:	e035      	b.n	8001b76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <HAL_RCC_OscConfig+0x4cc>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff fac6 	bl	80010a0 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff fac2 	bl	80010a0 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e026      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x498>
 8001b36:	e01e      	b.n	8001b76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d107      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e019      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <HAL_RCC_OscConfig+0x500>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000

08001b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0d0      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b98:	4b6a      	ldr	r3, [pc, #424]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d910      	bls.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b67      	ldr	r3, [pc, #412]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 0207 	bic.w	r2, r3, #7
 8001bae:	4965      	ldr	r1, [pc, #404]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b63      	ldr	r3, [pc, #396]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0b8      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d020      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be0:	4b59      	ldr	r3, [pc, #356]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a58      	ldr	r2, [pc, #352]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf8:	4b53      	ldr	r3, [pc, #332]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a52      	ldr	r2, [pc, #328]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c04:	4b50      	ldr	r3, [pc, #320]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	494d      	ldr	r1, [pc, #308]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d040      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b47      	ldr	r3, [pc, #284]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d115      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e07f      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c42:	4b41      	ldr	r3, [pc, #260]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e073      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c52:	4b3d      	ldr	r3, [pc, #244]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06b      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c62:	4b39      	ldr	r3, [pc, #228]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f023 0203 	bic.w	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4936      	ldr	r1, [pc, #216]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c74:	f7ff fa14 	bl	80010a0 <HAL_GetTick>
 8001c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7c:	f7ff fa10 	bl	80010a0 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e053      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	4b2d      	ldr	r3, [pc, #180]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 020c 	and.w	r2, r3, #12
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1eb      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b27      	ldr	r3, [pc, #156]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d210      	bcs.n	8001cd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b24      	ldr	r3, [pc, #144]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 0207 	bic.w	r2, r3, #7
 8001cba:	4922      	ldr	r1, [pc, #136]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b20      	ldr	r3, [pc, #128]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e032      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce0:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4916      	ldr	r1, [pc, #88]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cfe:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	490e      	ldr	r1, [pc, #56]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d12:	f000 f821 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d16:	4602      	mov	r2, r0
 8001d18:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	490a      	ldr	r1, [pc, #40]	@ (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d24:	5ccb      	ldrb	r3, [r1, r3]
 8001d26:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2a:	4a09      	ldr	r2, [pc, #36]	@ (8001d50 <HAL_RCC_ClockConfig+0x1cc>)
 8001d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <HAL_RCC_ClockConfig+0x1d0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f972 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08003174 	.word	0x08003174
 8001d50:	2000000c 	.word	0x2000000c
 8001d54:	20000010 	.word	0x20000010

08001d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d72:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x94>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d002      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x30>
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x36>
 8001d86:	e027      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d88:	4b19      	ldr	r3, [pc, #100]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d8a:	613b      	str	r3, [r7, #16]
      break;
 8001d8c:	e027      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	0c9b      	lsrs	r3, r3, #18
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	4a17      	ldr	r2, [pc, #92]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d98:	5cd3      	ldrb	r3, [r2, r3]
 8001d9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d010      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001da6:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x94>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	0c5b      	lsrs	r3, r3, #17
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	4a11      	ldr	r2, [pc, #68]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a0d      	ldr	r2, [pc, #52]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dba:	fb03 f202 	mul.w	r2, r3, r2
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e004      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a0c      	ldr	r2, [pc, #48]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dcc:	fb02 f303 	mul.w	r3, r2, r3
 8001dd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	613b      	str	r3, [r7, #16]
      break;
 8001dd6:	e002      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dda:	613b      	str	r3, [r7, #16]
      break;
 8001ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dde:	693b      	ldr	r3, [r7, #16]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	007a1200 	.word	0x007a1200
 8001df4:	08003184 	.word	0x08003184
 8001df8:	08003194 	.word	0x08003194
 8001dfc:	003d0900 	.word	0x003d0900

08001e00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e08:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <RCC_Delay+0x34>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <RCC_Delay+0x38>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	0a5b      	lsrs	r3, r3, #9
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e1c:	bf00      	nop
  }
  while (Delay --);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	60fa      	str	r2, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f9      	bne.n	8001e1c <RCC_Delay+0x1c>
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	2000000c 	.word	0x2000000c
 8001e38:	10624dd3 	.word	0x10624dd3

08001e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e076      	b.n	8001f3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d108      	bne.n	8001e68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e5e:	d009      	beq.n	8001e74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
 8001e66:	e005      	b.n	8001e74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe ff7a 	bl	8000d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001eaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef8:	ea42 0103 	orr.w	r1, r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	0c1a      	lsrs	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f002 0204 	and.w	r2, r2, #4
 8001f1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69da      	ldr	r2, [r3, #28]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	@ 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f52:	2301      	movs	r3, #1
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f56:	f7ff f8a3 	bl	80010a0 <HAL_GetTick>
 8001f5a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f62:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001f6a:	887b      	ldrh	r3, [r7, #2]
 8001f6c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f6e:	7ffb      	ldrb	r3, [r7, #31]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d00c      	beq.n	8001f8e <HAL_SPI_TransmitReceive+0x4a>
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f7a:	d106      	bne.n	8001f8a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <HAL_SPI_TransmitReceive+0x46>
 8001f84:	7ffb      	ldrb	r3, [r7, #31]
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d001      	beq.n	8001f8e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e17f      	b.n	800228e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_SPI_TransmitReceive+0x5c>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_SPI_TransmitReceive+0x5c>
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e174      	b.n	800228e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_SPI_TransmitReceive+0x6e>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e16d      	b.n	800228e <HAL_SPI_TransmitReceive+0x34a>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d003      	beq.n	8001fce <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2205      	movs	r2, #5
 8001fca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	887a      	ldrh	r2, [r7, #2]
 8001fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	887a      	ldrh	r2, [r7, #2]
 8001ff6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200e:	2b40      	cmp	r3, #64	@ 0x40
 8002010:	d007      	beq.n	8002022 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800202a:	d17e      	bne.n	800212a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_SPI_TransmitReceive+0xf6>
 8002034:	8afb      	ldrh	r3, [r7, #22]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d16c      	bne.n	8002114 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	881a      	ldrh	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	1c9a      	adds	r2, r3, #2
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800205e:	e059      	b.n	8002114 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b02      	cmp	r3, #2
 800206c:	d11b      	bne.n	80020a6 <HAL_SPI_TransmitReceive+0x162>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d016      	beq.n	80020a6 <HAL_SPI_TransmitReceive+0x162>
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	2b01      	cmp	r3, #1
 800207c:	d113      	bne.n	80020a6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	881a      	ldrh	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	1c9a      	adds	r2, r3, #2
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d119      	bne.n	80020e8 <HAL_SPI_TransmitReceive+0x1a4>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d014      	beq.n	80020e8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c8:	b292      	uxth	r2, r2
 80020ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d0:	1c9a      	adds	r2, r3, #2
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020e4:	2301      	movs	r3, #1
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80020e8:	f7fe ffda 	bl	80010a0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d80d      	bhi.n	8002114 <HAL_SPI_TransmitReceive+0x1d0>
 80020f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fe:	d009      	beq.n	8002114 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e0bc      	b.n	800228e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1a0      	bne.n	8002060 <HAL_SPI_TransmitReceive+0x11c>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d19b      	bne.n	8002060 <HAL_SPI_TransmitReceive+0x11c>
 8002128:	e082      	b.n	8002230 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <HAL_SPI_TransmitReceive+0x1f4>
 8002132:	8afb      	ldrh	r3, [r7, #22]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d171      	bne.n	800221c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	330c      	adds	r3, #12
 8002142:	7812      	ldrb	r2, [r2, #0]
 8002144:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002154:	b29b      	uxth	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800215e:	e05d      	b.n	800221c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b02      	cmp	r3, #2
 800216c:	d11c      	bne.n	80021a8 <HAL_SPI_TransmitReceive+0x264>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d017      	beq.n	80021a8 <HAL_SPI_TransmitReceive+0x264>
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	2b01      	cmp	r3, #1
 800217c:	d114      	bne.n	80021a8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	330c      	adds	r3, #12
 8002188:	7812      	ldrb	r2, [r2, #0]
 800218a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d119      	bne.n	80021ea <HAL_SPI_TransmitReceive+0x2a6>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d014      	beq.n	80021ea <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021e6:	2301      	movs	r3, #1
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021ea:	f7fe ff59 	bl	80010a0 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d803      	bhi.n	8002202 <HAL_SPI_TransmitReceive+0x2be>
 80021fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d102      	bne.n	8002208 <HAL_SPI_TransmitReceive+0x2c4>
 8002202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002204:	2b00      	cmp	r3, #0
 8002206:	d109      	bne.n	800221c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e038      	b.n	800228e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002220:	b29b      	uxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d19c      	bne.n	8002160 <HAL_SPI_TransmitReceive+0x21c>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d197      	bne.n	8002160 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002230:	6a3a      	ldr	r2, [r7, #32]
 8002232:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f8b7 	bl	80023a8 <SPI_EndRxTxTransaction>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2220      	movs	r2, #32
 8002244:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e01d      	b.n	800228e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10a      	bne.n	8002270 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800228c:	2300      	movs	r3, #0
  }
}
 800228e:	4618      	mov	r0, r3
 8002290:	3728      	adds	r7, #40	@ 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	4613      	mov	r3, r2
 80022a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022a8:	f7fe fefa 	bl	80010a0 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	4413      	add	r3, r2
 80022b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022b8:	f7fe fef2 	bl	80010a0 <HAL_GetTick>
 80022bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022be:	4b39      	ldr	r3, [pc, #228]	@ (80023a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	015b      	lsls	r3, r3, #5
 80022c4:	0d1b      	lsrs	r3, r3, #20
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	fb02 f303 	mul.w	r3, r2, r3
 80022cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022ce:	e054      	b.n	800237a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d6:	d050      	beq.n	800237a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022d8:	f7fe fee2 	bl	80010a0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d902      	bls.n	80022ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d13d      	bne.n	800236a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80022fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002306:	d111      	bne.n	800232c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002310:	d004      	beq.n	800231c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800231a:	d107      	bne.n	800232c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800232a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002334:	d10f      	bne.n	8002356 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002354:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e017      	b.n	800239a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3b01      	subs	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4013      	ands	r3, r2
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	429a      	cmp	r2, r3
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	429a      	cmp	r2, r3
 8002396:	d19b      	bne.n	80022d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000000c 	.word	0x2000000c

080023a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2201      	movs	r2, #1
 80023bc:	2102      	movs	r1, #2
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f7ff ff6a 	bl	8002298 <SPI_WaitFlagStateUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ce:	f043 0220 	orr.w	r2, r3, #32
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e013      	b.n	8002402 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2180      	movs	r1, #128	@ 0x80
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f7ff ff57 	bl	8002298 <SPI_WaitFlagStateUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e000      	b.n	8002402 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e041      	b.n	80024a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d106      	bne.n	8002436 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7fe fd03 	bl	8000e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2202      	movs	r2, #2
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	4619      	mov	r1, r3
 8002448:	4610      	mov	r0, r2
 800244a:	f000 fafb 	bl	8002a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d001      	beq.n	80024c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e032      	b.n	8002526 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a18      	ldr	r2, [pc, #96]	@ (8002530 <HAL_TIM_Base_Start+0x88>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00e      	beq.n	80024f0 <HAL_TIM_Base_Start+0x48>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024da:	d009      	beq.n	80024f0 <HAL_TIM_Base_Start+0x48>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <HAL_TIM_Base_Start+0x8c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d004      	beq.n	80024f0 <HAL_TIM_Base_Start+0x48>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a13      	ldr	r2, [pc, #76]	@ (8002538 <HAL_TIM_Base_Start+0x90>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d111      	bne.n	8002514 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d010      	beq.n	8002524 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002512:	e007      	b.n	8002524 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	40012c00 	.word	0x40012c00
 8002534:	40000400 	.word	0x40000400
 8002538:	40000800 	.word	0x40000800

0800253c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e041      	b.n	80025d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f839 	bl	80025da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3304      	adds	r3, #4
 8002578:	4619      	mov	r1, r3
 800257a:	4610      	mov	r0, r2
 800257c:	f000 fa62 	bl	8002a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <HAL_TIM_PWM_Start+0x24>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	bf14      	ite	ne
 8002608:	2301      	movne	r3, #1
 800260a:	2300      	moveq	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	e022      	b.n	8002656 <HAL_TIM_PWM_Start+0x6a>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b04      	cmp	r3, #4
 8002614:	d109      	bne.n	800262a <HAL_TIM_PWM_Start+0x3e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b01      	cmp	r3, #1
 8002620:	bf14      	ite	ne
 8002622:	2301      	movne	r3, #1
 8002624:	2300      	moveq	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	e015      	b.n	8002656 <HAL_TIM_PWM_Start+0x6a>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d109      	bne.n	8002644 <HAL_TIM_PWM_Start+0x58>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e008      	b.n	8002656 <HAL_TIM_PWM_Start+0x6a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e05e      	b.n	800271c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d104      	bne.n	800266e <HAL_TIM_PWM_Start+0x82>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800266c:	e013      	b.n	8002696 <HAL_TIM_PWM_Start+0xaa>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d104      	bne.n	800267e <HAL_TIM_PWM_Start+0x92>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800267c:	e00b      	b.n	8002696 <HAL_TIM_PWM_Start+0xaa>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b08      	cmp	r3, #8
 8002682:	d104      	bne.n	800268e <HAL_TIM_PWM_Start+0xa2>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800268c:	e003      	b.n	8002696 <HAL_TIM_PWM_Start+0xaa>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2202      	movs	r2, #2
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2201      	movs	r2, #1
 800269c:	6839      	ldr	r1, [r7, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fc5c 	bl	8002f5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002724 <HAL_TIM_PWM_Start+0x138>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d107      	bne.n	80026be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a18      	ldr	r2, [pc, #96]	@ (8002724 <HAL_TIM_PWM_Start+0x138>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d00e      	beq.n	80026e6 <HAL_TIM_PWM_Start+0xfa>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026d0:	d009      	beq.n	80026e6 <HAL_TIM_PWM_Start+0xfa>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a14      	ldr	r2, [pc, #80]	@ (8002728 <HAL_TIM_PWM_Start+0x13c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d004      	beq.n	80026e6 <HAL_TIM_PWM_Start+0xfa>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a12      	ldr	r2, [pc, #72]	@ (800272c <HAL_TIM_PWM_Start+0x140>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d111      	bne.n	800270a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b06      	cmp	r3, #6
 80026f6:	d010      	beq.n	800271a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002708:	e007      	b.n	800271a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40000400 	.word	0x40000400
 800272c:	40000800 	.word	0x40000800

08002730 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800274a:	2302      	movs	r3, #2
 800274c:	e0ae      	b.n	80028ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b0c      	cmp	r3, #12
 800275a:	f200 809f 	bhi.w	800289c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800275e:	a201      	add	r2, pc, #4	@ (adr r2, 8002764 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002764:	08002799 	.word	0x08002799
 8002768:	0800289d 	.word	0x0800289d
 800276c:	0800289d 	.word	0x0800289d
 8002770:	0800289d 	.word	0x0800289d
 8002774:	080027d9 	.word	0x080027d9
 8002778:	0800289d 	.word	0x0800289d
 800277c:	0800289d 	.word	0x0800289d
 8002780:	0800289d 	.word	0x0800289d
 8002784:	0800281b 	.word	0x0800281b
 8002788:	0800289d 	.word	0x0800289d
 800278c:	0800289d 	.word	0x0800289d
 8002790:	0800289d 	.word	0x0800289d
 8002794:	0800285b 	.word	0x0800285b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f9be 	bl	8002b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0208 	orr.w	r2, r2, #8
 80027b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0204 	bic.w	r2, r2, #4
 80027c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6999      	ldr	r1, [r3, #24]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	619a      	str	r2, [r3, #24]
      break;
 80027d6:	e064      	b.n	80028a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fa04 	bl	8002bec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6999      	ldr	r1, [r3, #24]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	021a      	lsls	r2, r3, #8
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	619a      	str	r2, [r3, #24]
      break;
 8002818:	e043      	b.n	80028a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fa4d 	bl	8002cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0208 	orr.w	r2, r2, #8
 8002834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69da      	ldr	r2, [r3, #28]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0204 	bic.w	r2, r2, #4
 8002844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69d9      	ldr	r1, [r3, #28]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	61da      	str	r2, [r3, #28]
      break;
 8002858:	e023      	b.n	80028a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fa97 	bl	8002d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69da      	ldr	r2, [r3, #28]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69da      	ldr	r2, [r3, #28]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69d9      	ldr	r1, [r3, #28]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	021a      	lsls	r2, r3, #8
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	61da      	str	r2, [r3, #28]
      break;
 800289a:	e002      	b.n	80028a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	75fb      	strb	r3, [r7, #23]
      break;
 80028a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_TIM_ConfigClockSource+0x1c>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e0b4      	b.n	8002a3a <HAL_TIM_ConfigClockSource+0x186>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002908:	d03e      	beq.n	8002988 <HAL_TIM_ConfigClockSource+0xd4>
 800290a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800290e:	f200 8087 	bhi.w	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002916:	f000 8086 	beq.w	8002a26 <HAL_TIM_ConfigClockSource+0x172>
 800291a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800291e:	d87f      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b70      	cmp	r3, #112	@ 0x70
 8002922:	d01a      	beq.n	800295a <HAL_TIM_ConfigClockSource+0xa6>
 8002924:	2b70      	cmp	r3, #112	@ 0x70
 8002926:	d87b      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b60      	cmp	r3, #96	@ 0x60
 800292a:	d050      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0x11a>
 800292c:	2b60      	cmp	r3, #96	@ 0x60
 800292e:	d877      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b50      	cmp	r3, #80	@ 0x50
 8002932:	d03c      	beq.n	80029ae <HAL_TIM_ConfigClockSource+0xfa>
 8002934:	2b50      	cmp	r3, #80	@ 0x50
 8002936:	d873      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b40      	cmp	r3, #64	@ 0x40
 800293a:	d058      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x13a>
 800293c:	2b40      	cmp	r3, #64	@ 0x40
 800293e:	d86f      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b30      	cmp	r3, #48	@ 0x30
 8002942:	d064      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x15a>
 8002944:	2b30      	cmp	r3, #48	@ 0x30
 8002946:	d86b      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b20      	cmp	r3, #32
 800294a:	d060      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x15a>
 800294c:	2b20      	cmp	r3, #32
 800294e:	d867      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002950:	2b00      	cmp	r3, #0
 8002952:	d05c      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x15a>
 8002954:	2b10      	cmp	r3, #16
 8002956:	d05a      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x15a>
 8002958:	e062      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800296a:	f000 fad8 	bl	8002f1e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800297c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	609a      	str	r2, [r3, #8]
      break;
 8002986:	e04f      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002998:	f000 fac1 	bl	8002f1e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029aa:	609a      	str	r2, [r3, #8]
      break;
 80029ac:	e03c      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ba:	461a      	mov	r2, r3
 80029bc:	f000 fa38 	bl	8002e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2150      	movs	r1, #80	@ 0x50
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fa8f 	bl	8002eea <TIM_ITRx_SetConfig>
      break;
 80029cc:	e02c      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029da:	461a      	mov	r2, r3
 80029dc:	f000 fa56 	bl	8002e8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2160      	movs	r1, #96	@ 0x60
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fa7f 	bl	8002eea <TIM_ITRx_SetConfig>
      break;
 80029ec:	e01c      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fa:	461a      	mov	r2, r3
 80029fc:	f000 fa18 	bl	8002e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2140      	movs	r1, #64	@ 0x40
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fa6f 	bl	8002eea <TIM_ITRx_SetConfig>
      break;
 8002a0c:	e00c      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4619      	mov	r1, r3
 8002a18:	4610      	mov	r0, r2
 8002a1a:	f000 fa66 	bl	8002eea <TIM_ITRx_SetConfig>
      break;
 8002a1e:	e003      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      break;
 8002a24:	e000      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a2f      	ldr	r2, [pc, #188]	@ (8002b14 <TIM_Base_SetConfig+0xd0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00b      	beq.n	8002a74 <TIM_Base_SetConfig+0x30>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a62:	d007      	beq.n	8002a74 <TIM_Base_SetConfig+0x30>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a2c      	ldr	r2, [pc, #176]	@ (8002b18 <TIM_Base_SetConfig+0xd4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d003      	beq.n	8002a74 <TIM_Base_SetConfig+0x30>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8002b1c <TIM_Base_SetConfig+0xd8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d108      	bne.n	8002a86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a22      	ldr	r2, [pc, #136]	@ (8002b14 <TIM_Base_SetConfig+0xd0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00b      	beq.n	8002aa6 <TIM_Base_SetConfig+0x62>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a94:	d007      	beq.n	8002aa6 <TIM_Base_SetConfig+0x62>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a1f      	ldr	r2, [pc, #124]	@ (8002b18 <TIM_Base_SetConfig+0xd4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d003      	beq.n	8002aa6 <TIM_Base_SetConfig+0x62>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8002b1c <TIM_Base_SetConfig+0xd8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d108      	bne.n	8002ab8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a0d      	ldr	r2, [pc, #52]	@ (8002b14 <TIM_Base_SetConfig+0xd0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d103      	bne.n	8002aec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f023 0201 	bic.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	611a      	str	r2, [r3, #16]
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	40000400 	.word	0x40000400
 8002b1c:	40000800 	.word	0x40000800

08002b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f023 0201 	bic.w	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f023 0302 	bic.w	r3, r3, #2
 8002b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a1c      	ldr	r2, [pc, #112]	@ (8002be8 <TIM_OC1_SetConfig+0xc8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d10c      	bne.n	8002b96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f023 0308 	bic.w	r3, r3, #8
 8002b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f023 0304 	bic.w	r3, r3, #4
 8002b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a13      	ldr	r2, [pc, #76]	@ (8002be8 <TIM_OC1_SetConfig+0xc8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d111      	bne.n	8002bc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	621a      	str	r2, [r3, #32]
}
 8002bdc:	bf00      	nop
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40012c00 	.word	0x40012c00

08002bec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f023 0210 	bic.w	r2, r3, #16
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f023 0320 	bic.w	r3, r3, #32
 8002c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a1d      	ldr	r2, [pc, #116]	@ (8002cbc <TIM_OC2_SetConfig+0xd0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d10d      	bne.n	8002c68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a14      	ldr	r2, [pc, #80]	@ (8002cbc <TIM_OC2_SetConfig+0xd0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d113      	bne.n	8002c98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	621a      	str	r2, [r3, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	40012c00 	.word	0x40012c00

08002cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0303 	bic.w	r3, r3, #3
 8002cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a1d      	ldr	r2, [pc, #116]	@ (8002d90 <TIM_OC3_SetConfig+0xd0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d10d      	bne.n	8002d3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a14      	ldr	r2, [pc, #80]	@ (8002d90 <TIM_OC3_SetConfig+0xd0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d113      	bne.n	8002d6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	621a      	str	r2, [r3, #32]
}
 8002d84:	bf00      	nop
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40012c00 	.word	0x40012c00

08002d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	031b      	lsls	r3, r3, #12
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a0f      	ldr	r2, [pc, #60]	@ (8002e2c <TIM_OC4_SetConfig+0x98>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d109      	bne.n	8002e08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	019b      	lsls	r3, r3, #6
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	621a      	str	r2, [r3, #32]
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	40012c00 	.word	0x40012c00

08002e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f023 0201 	bic.w	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f023 030a 	bic.w	r3, r3, #10
 8002e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	621a      	str	r2, [r3, #32]
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f023 0210 	bic.w	r2, r3, #16
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	031b      	lsls	r3, r3, #12
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	621a      	str	r2, [r3, #32]
}
 8002ee0:	bf00      	nop
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b085      	sub	sp, #20
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f043 0307 	orr.w	r3, r3, #7
 8002f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	609a      	str	r2, [r3, #8]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b087      	sub	sp, #28
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	021a      	lsls	r2, r3, #8
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	609a      	str	r2, [r3, #8]
}
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	2201      	movs	r2, #1
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a1a      	ldr	r2, [r3, #32]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	401a      	ands	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1a      	ldr	r2, [r3, #32]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	621a      	str	r2, [r3, #32]
}
 8002f9a:	bf00      	nop
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e046      	b.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a16      	ldr	r2, [pc, #88]	@ (8003054 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00e      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003008:	d009      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a12      	ldr	r2, [pc, #72]	@ (8003058 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a10      	ldr	r2, [pc, #64]	@ (800305c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10c      	bne.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	4313      	orrs	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	40012c00 	.word	0x40012c00
 8003058:	40000400 	.word	0x40000400
 800305c:	40000800 	.word	0x40000800

08003060 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003078:	2302      	movs	r3, #2
 800307a:	e03d      	b.n	80030f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4313      	orrs	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <memset>:
 8003102:	4603      	mov	r3, r0
 8003104:	4402      	add	r2, r0
 8003106:	4293      	cmp	r3, r2
 8003108:	d100      	bne.n	800310c <memset+0xa>
 800310a:	4770      	bx	lr
 800310c:	f803 1b01 	strb.w	r1, [r3], #1
 8003110:	e7f9      	b.n	8003106 <memset+0x4>
	...

08003114 <__libc_init_array>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	2600      	movs	r6, #0
 8003118:	4d0c      	ldr	r5, [pc, #48]	@ (800314c <__libc_init_array+0x38>)
 800311a:	4c0d      	ldr	r4, [pc, #52]	@ (8003150 <__libc_init_array+0x3c>)
 800311c:	1b64      	subs	r4, r4, r5
 800311e:	10a4      	asrs	r4, r4, #2
 8003120:	42a6      	cmp	r6, r4
 8003122:	d109      	bne.n	8003138 <__libc_init_array+0x24>
 8003124:	f000 f81a 	bl	800315c <_init>
 8003128:	2600      	movs	r6, #0
 800312a:	4d0a      	ldr	r5, [pc, #40]	@ (8003154 <__libc_init_array+0x40>)
 800312c:	4c0a      	ldr	r4, [pc, #40]	@ (8003158 <__libc_init_array+0x44>)
 800312e:	1b64      	subs	r4, r4, r5
 8003130:	10a4      	asrs	r4, r4, #2
 8003132:	42a6      	cmp	r6, r4
 8003134:	d105      	bne.n	8003142 <__libc_init_array+0x2e>
 8003136:	bd70      	pop	{r4, r5, r6, pc}
 8003138:	f855 3b04 	ldr.w	r3, [r5], #4
 800313c:	4798      	blx	r3
 800313e:	3601      	adds	r6, #1
 8003140:	e7ee      	b.n	8003120 <__libc_init_array+0xc>
 8003142:	f855 3b04 	ldr.w	r3, [r5], #4
 8003146:	4798      	blx	r3
 8003148:	3601      	adds	r6, #1
 800314a:	e7f2      	b.n	8003132 <__libc_init_array+0x1e>
 800314c:	08003198 	.word	0x08003198
 8003150:	08003198 	.word	0x08003198
 8003154:	08003198 	.word	0x08003198
 8003158:	0800319c 	.word	0x0800319c

0800315c <_init>:
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	bf00      	nop
 8003160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003162:	bc08      	pop	{r3}
 8003164:	469e      	mov	lr, r3
 8003166:	4770      	bx	lr

08003168 <_fini>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	bf00      	nop
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr
